#+TITLE: Python notes\

* Dive into Python

** Chapter 1
+ Notes: All functions return something if not specified in the function than return value will be none
  no explicit types...
+ Function arguments can be in any order as long as they are named. Once a named argument is used all further arguments must be named.
+ Docstrings: A triple quote starts (and stops) a multiline comment - such as a doc string, They may contain single and double quotes. A docstring if it exists must be the first thing defined in a function - it must start on the first line after the declaration. The docstring is also available at runtime as an attribute of the function.  Also used by IDE's for tooltips.
+ Import search path: search path is a list defined in sys.path. New directories can be added at runtime by adding the directory name to sys.path - sys.path.insert(0 new_path) inserts a new directory as the first item in the list (directories are searched in the order they appear until a .py file whith a name that matches the import statement is found)
+ Once a .py file is imported as a module any of its public functions, classes or attributes are available to other modules or interactively through the REPL
+ when calling a function use moduleName.Function
+ Python functions (like everything else in Python) are objects and have attributes that are available at runtime.
+ Objects in python do not need to have attributes or methods - not all objects are subclassable. Everything is an object in the sense that it can be assigned to a variable or passed as an argument to a function.
+ In Python functions are first class objects and can be passed  as argument to other functions. Modules and classes (or instances of a class) as well
+ Is this the same sort of flexibility that allow for meta-programming in LISP?
+ Indenting code: Instead of using punctuation marks to mark out blocks of code Python uses indentation... Whitespace use must be consistent...
+ Exceptions: Instead of using return codes to indicate errors. Python uses exceptions that once raised need to be handled. Unhandled exceptions will cause a programs execution to halt. Functions dont declare which exceptions may be raised. Not all exceptions are errors - some are fairly easy to anticipate (like a file not opening because it does not exist yet)
+ If a line of code is likely to raise an exception use a try-except block. Use raise statement to generate exceptions.
+ raise statement myExceptionName('optional human readable debugging info') - this creates an instance of the ValueError class and passing the string to its initialization method.
+ Exceptions that are not handled in the function that raises it are passed to the calling function until handled or the program crashes and Python prints a traceback error.
+ One common built in exception is the ImportError - handling it provide a way to have the features of a program gracefully degrade if certain libraries will only be available in certain circumstances.
  #+BEGIN_SRC python
    try:
        import chardet
    except ImportError:
        chardet = None

    if chardet:
        # code based on having chardet librqary
    else:
        # the rest of the program
  #+END_SRC

  #+RESULTS:

  This exception can also be used when there are multiple modules that implement an API to allow one to be used only if the other one is not available without needing to have further code to determine which version was imported.
+ Everything in Python is case sensitive.
+ Modules have several built in attributes. if a module is imported __name__ will be the modules filename (without path info or extension) if the module is run as a standalone __name__ will default to __main__ This can be used for unit testing

** Chapter 2 - datatypes
*** Native Datatypes
1. Boolean
2. Numbers: can be integers fractions, floats, or complex
3. Strings: sequence of unicode characters
4. Bytes and byte arrays: binary files etc
5. Lists: ordered sequence of values
6. Tuples: orderd immutable sequence of values
7. Set: unordered collection of values
8. Dictionaries: unordered collection of key-value pairs.
Plus lots of other stuff since everything is an object in Python.
+ Boolean 0 = false every other number evaluates to true
+ Lists : Workhorse of basic Python. Can expand dynamically 
a_list = ['a', 'b', 'c', 'foo']
a_list[0]= 'a'
lists can be sliced a_list[1:2] returns ['b', 'c']
the first number is the number to start with and the second is the number to stop before. If an indice is the first or last item it can be left out
+

* Python for Everybody - I can at least get credit for doing this\
+ Assignments and badges from webpage. Coursera course!
+ Is based on how to think like a computer scientist but with a focus on data analysis rather than more general programming. I can probably combine this with dive into Python to get a decent intro course. Will also need scripting stuff for the devops....
** Chapter 1
+ Computers are good at tasks that people are not - like crunching data, repeating simple steps identically etc. Computers are extremely literal, programming requires being precise to avoid syntax errors. Luckily things like LSP exist to warn me when there is a problem.
+ Hardware architecture: I know this stuff already
+ Python as a language: Designed to be easy to read, very popular.

** Chapter 2
+ constants - variables that don't change. 
+ You can't use reserved words.
+ listen to video lectures and do online exercises


** Chapter 3
+ Logical operators - and, or, not. Conditional execution: simplest is the if statement. Boolean expression after the if statement is called the condition. The if statement is ended with a colon (:) lines that are part of the statement are indented.
+ Nested conditions can get hard to read - using compound statements with logical operators like and or or...
+ Exceptions: unhandled exceptions will cause a script to halt...
+ conditional execution structure called try / except handles areas like user input that may need to deal with error causing or unexpected results.
+ the except block is only executed in case of an error

#+BEGIN_SRC python

inp = input('Enter Fahrenheit Temperature:')
try:
    fahr = float(inp)
    cel = (fahr - 32.0) * 5.0 / 9.0
    print(cel)
except:
    print('Please enter a number')
#+END_SRC

+ the interpreter jumps to the except block if an error is encountered while executing the try block. Called catching rather than handling the exception
+ Logical expressions are evaluated fri left to right. In expressions that use the and operator if the first statement evaluates to false the second statement is not checked. When evaluation of a compound statement is stopped before all component's are checked it is called short-circuiting the evaluation.
+ Short-circuiting can be used to create guardian patterns. By placing a statement that will evaluate to false for values that would cause issue (divide by 0) first in an and statement the evaluation that would cause an error is never done.
+ 3.9 Debugging: tracebacks provide information on the cause of the error including what the type of error and where it occurred.


** Chapter 4 Functions
+ Python comes with a set of built in functions including max, min, len - all of which work on a set of values. The names of built in functions should be treated as keywords.
*** Conversion functions
+ int will try to turn a value into an integer or it will raise an error. If used on a float it will truncate the number and return the value that is before the decimal point.
*** Math functions
+ Python include a math module that can be imported (import math) the functions and variables in the module can be accessed through dot notation (math.log10(), math.pi)
*** Random Numbers
+ actual random numbers are hard to generate. random module produces pseudoranhdom numbers random.random() produces a psudorandom number between >= 0.0 and < 1.0
+ random.randint(low high) produces an integer between low and high (inclusive)
+ random.choice selects an element from a sequence of values.
+ random also contains functions to generate values from common distributions
*** Adding function
+ function definitions start with def eyword
+ name can contain letters numbers and some punctioation mark. First character can not be a number.
+ First line is the header, followed by the body.Header ends with : the body is indented - convention is usually 4 spaces (Alphabet uses 2 space indentation)
+ Defining a function creates a variable of the same name of type function.
+ Functions need to be defined before they are called
*** Flow of execution
+ Execution always begins with the first statement of the progrsm and procedes from top to bottom. Function definitions create the function but statements inside the function are not executed until the function is called (that is why if a local var is defined with the same name as a global var inside a function, trying to call the variable before the local declaration does not go to the global definition but instead produces an error.)
*** Parameters and arguments
+ inside a function arguments are assigned to local values called parameters
  if in the function call an expression is used as an argument it is evaluated before the function is called and assigned to the parameter
+ void functions (that dont specify a return value) return the value of None of type NoneType

** Chapter 5 - Iteration
*** While statement
+ the value of the variable used to determine if the loop is finished should be updated in the while block (or else the loop will never exit) The variable that is changed each time the loop runs is called the iteration variable. A infinite loop with a break statement that is executed when some condition is reached in the middle of the loop (user input for instance)
+ continue statement skips to the next iteration without finishing the body of the loop
*** For loops
+ used when there is a list of items to iterate over or other defined number of iterations to run.
+ called a definite loop instead of an indefinite loop like the while statement
*** Loop patterns
+ Counting and summing
  #+BEGIN_SRC python
    count = 0
    for itevar in [3, 41, 12, 9, 74, 15]:
        count = count + 1
    print('Count: ', count)
   #+END_SRC
   This pruints out a count of the number of items in the list. Note that in a for loop the iteration variable does not need to be used in the loop body

** Chapter 6 - Strings 
+ Individual characters from a string can be accesed using bracket notation.
